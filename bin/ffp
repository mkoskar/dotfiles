#!/usr/bin/env bash

set -eu -o pipefail
shopt -s extglob

prgname=${0##*/}

_usage() {
    echo "usage: $prgname [-p profile] [arg]..."
}
usage() { _usage; exit 0; }
usage_err() { _usage; exit 2; } >&2

bin=firefox
bin_name=$bin
profile=

case $prgname in
    ff)
        profile=default
        ;;
    ffdev)
        bin=firefox-developer-edition
        bin_name=firefox-dev
        ;;
esac

while getopts p:h opt; do
    case $opt in
        p) profile=$OPTARG ;;
        h) usage ;;
        *) usage_err ;;
    esac
done
shift $((OPTIND-1))

# ----------------------------------------

if [[ ! $profile ]]; then
    filter=
    profiles=(
        default
        dev
        lab
        plain
    )
    for p in ~/.config/"$bin_name".*; do
        [[ -d $p ]] || continue
        profiles+=("${p#*"$bin_name".}")
    done
    profile=$(
        printf '%s\n' "${profiles[@]}" |
            sort -u | grep -P "$filter" |
            dmenu1 -p "$prgname"
    )
fi

[[ $profile ]] || exit 1

path=~/.config/$bin_name
[[ $profile = default ]] || path+=.$profile

mkdir -p "$path"
cd "$path"

file=user.js
[[ -f $file.lock ]] || {
    printf '// %s\n' "$file"
    echo
    printf %s 'user_pref("toolkit.legacyUserProfileCustomizations.stylesheets", true);'

    if [[ ! $profile =~ ^plain(-|$) ]]; then
        cat <<-'EOF'

			//user_pref("browser.proton.enabled", false);
			user_pref("accessibility.typeaheadfind.flashBar", 0);
			user_pref("app.shield.optoutstudies.enabled", false);
			user_pref("browser.ctrlTab.previews", true);
			user_pref("browser.fixup.alternate.enabled", false);
			user_pref("browser.newtabpage.directory.ping", "");
			user_pref("browser.newtabpage.directory.source", "");
			user_pref("browser.newtabpage.enabled", false);
			user_pref("browser.newtabpage.enhanced", false);
			user_pref("browser.search.geoSpecificDefaults", false);
			user_pref("browser.shell.checkDefaultBrowser", false);
			user_pref("browser.startup.homepage", "about:blank");
			user_pref("browser.startup.homepage_override.mstone", "ignore");
			user_pref("browser.startup.page", 3);
			user_pref("browser.tabs.animate", false);
			user_pref("browser.tabs.closeWindowWithLastTab", false);
			user_pref("browser.tabs.warnOnClose", false);
			user_pref("browser.tabs.warnOnCloseOtherTabs", false);
			user_pref("browser.tabs.warnOnOpen", false);
			user_pref("datareporting.healthreport.uploadEnabled", false);
			user_pref("datareporting.policy.dataSubmissionEnabled", false);
			user_pref("devtools.cache.disabled", true);
			user_pref("devtools.chrome.enabled", true);
			user_pref("devtools.command-button-measure.enabled", true);
			user_pref("devtools.command-button-paintflashing.enabled", true);
			user_pref("devtools.command-button-rulers.enabled", true);
			user_pref("devtools.debugger.remote-enabled", true);
			user_pref("devtools.dom.enabled", true);
			user_pref("devtools.editor.keymap", "vim");
			user_pref("devtools.editor.tabsize", 4);
			user_pref("devtools.inspector.showUserAgentStyles", true);
			user_pref("devtools.onboarding.telemetry.logged", true);
			user_pref("devtools.scratchpad.enabled", true);
			user_pref("devtools.webconsole.persistlog", true);
			user_pref("devtools.webconsole.timestampMessages", true);
			user_pref("devtools.webide.autoinstallADBExtension", false);
			user_pref("devtools.webide.autoinstallADBHelper", false);
			user_pref("network.dns.disablePrefetch", true);
			user_pref("network.prefetch-next", false);
			user_pref("plugin.defaultXpi.state", 1);
			user_pref("plugin.state.java", 1);
			user_pref("privacy.cpd.offlineApps", true);
			user_pref("privacy.cpd.openWindows", true);
			user_pref("privacy.cpd.siteSettings", true);
			user_pref("reader.parse-on-load.enabled", false);
			user_pref("security.ssl3.dhe_rsa_aes_128_sha", false);
			user_pref("security.ssl3.dhe_rsa_aes_256_sha", false);
			user_pref("toolkit.cosmeticAnimations.enabled", false);
			user_pref("toolkit.telemetry.archive.enabled", false);
			user_pref("toolkit.telemetry.enabled", false);
			user_pref("toolkit.telemetry.unified", false);
		EOF

        [[ ! $profile =~ ^(dev|lab)(-|$) ]] && cat <<-'EOF'

			user_pref("media.peerconnection.enabled", false);
			user_pref("media.peerconnection.ice.default_address_only", true);
			user_pref("network.http.pipelining", true);
			user_pref("network.http.proxy.pipelining", true);
			user_pref("network.http.referer.XOriginPolicy", 1);
			user_pref("network.http.referer.spoofSource", true);
			user_pref("privacy.donottrackheader.enabled", true);
			user_pref("privacy.trackingprotection.enabled", true);
		EOF

        [[ $profile = default ]] && cat <<-'EOF'

			//user_pref("network.cookie.cookieBehavior", 3);
			//user_pref("network.cookie.lifetimePolicy", 1);

			user_pref("beacon.enabled", false);
			user_pref("browser.safebrowsing.enabled", false);
			user_pref("browser.safebrowsing.malware.enabled", false);
			user_pref("dom.battery.enabled", false);
			user_pref("dom.event.clipboardevents.enabled", false);
			user_pref("geo.enabled", false);

			// OpenGL compositing
			user_pref("layers.acceleration.force-enabled", true);

			// WebRender compositing
			user_pref("gfx.webrender.all", true);

			// HW video acceleration
			user_pref("media.ffmpeg.vaapi.enabled", true);
		EOF
    fi
} >"$file"

mkdir -p chrome
cd chrome

case $profile in
    dev?(-*))   frame_color='#0099ff' ;;
    lab?(-*))   frame_color='#ff2200' ;;
    plain?(-*)) frame_color='#26bf30' ;;
    *)          frame_color='#ff9900' ;;
esac

file=userChrome.css
[[ -f $file.lock ]] || {
    printf '/* %s */\n' "$file"

    cat <<-EOF

		.tabbrowser-tab {
		    min-height: auto !important;
		}
		.tab-background {
		    border-radius: 0 !important;
		    margin-block: 0 !important;
		}
	EOF

    [[ $profile != default ]] && cat <<-EOF

		#TabsToolbar::before {
		    content: "$profile";
		    background: $frame_color;
		    color: white;
		    display: -moz-box;
		    font-family: monospace;
		    font-weight: bold;
		    padding: 10px 7px 0 5px;
		}
	EOF
} >"$file"

file=userContent.css
[[ -f $file.lock ]] || {
    printf '/* %s */\n' "$file"

    [[ $profile = default ]] && cat <<-'EOF'

		@-moz-document url-prefix(https://lore.kernel.org/) {
		    .add { background: lightgreen }
		    .del { background: lightpink }
		    .head { background: lightgray }
		    .hunk { background: gold }
		    .q { background: lightgray }

		    pre { background: #eee }
		    pre#R { background: none }
		    body > form pre { background: none }
		    body > pre:last-of-type { background: none }

		    #t { background: cyan }
		    #u { background: yellow }
		    a#r { background: cyan }
		    a[id] { background: cyan }
		    ul { list-style: none; padding-top: 0 }
		}

		@-moz-document url-prefix(https://www.youtube.com/) {
		    #chat { display: none !important }
		    #comments { display: none !important }
		}
	EOF
} >"$file"

export MOZ_X11_EGL=1
export MOZ_DISABLE_RDD_SANDBOX=1
exec "$bin" --class "Firefox ($profile)" --profile "$path" "$@"
