#!/usr/bin/env bash

_curl() {
    local stat scode surl
    stat=$(
        curl -sSLG \
            -o _curl \
            -d key="$key" \
            -w '%{http_code}\t%{url_effective}' \
            "$@"
    )
    read -r scode surl <<<"$stat"
    if [[ $scode != 200 ]]; then
        echo "HTTP $scode : $surl" >&2
        cat _curl >&2
        exit 1
    fi
}

yt_video() {
    _curl https://www.googleapis.com/youtube/v3/videos \
        -d id="$1" \
        -d part=id,snippet
    jq -r '.items[] | "#EXTINF:0," + .snippet.title + "\nytdl://" + .id' <_curl
}

yt_playlist() {
    _curl https://www.googleapis.com/youtube/v3/playlistItems \
        -d pageToken="${2-}" \
        -d playlistId="$1" \
        -d maxResults=50 \
        -d part=id,snippet
    cat _curl >>tmp
    local np
    if np=$(jq -re .nextPageToken <_curl); then
        yt_playlist "$1" "$np"
        return
    fi
    jq -r '.items[].snippet |
        "#EXTINF:0," + .title + "\nytdl://" + .resourceId.videoId' <tmp
}

yt_channel() {
    _curl https://www.googleapis.com/youtube/v3/search \
        -d channelId="$1" \
        -d pageToken="${2-}" \
        -d maxResults=50 \
        -d order=date \
        -d part=id,snippet \
        -d type=video
    cat _curl >>tmp
    local np
    if np=$(jq -re .nextPageToken <_curl); then
        yt_channel "$1" "$np"
        return
    fi
    jq -r '.items[] |
        "#EXTINF:0," + .snippet.title + "\nytdl://" + .id.videoId' <tmp
}

yt_user() {
    _curl https://www.googleapis.com/youtube/v3/channels \
        -d forUsername="$1" \
        -d part=id
    local id
    if id=$(jq -re '.items[].id' <_curl); then
        yt_channel "$id"
    fi
}

handle_api() {
    set -eu
    key=$(<~/.yt)

    tmpdir=$(mktemp -d)
    cleanup() { rm -rf "$tmpdir"; }
    trap cleanup EXIT

    cd "$tmpdir"
    if [[ $1 =~ ^https?://www\.youtube\.com/watch\?v=([^/]*)$ ]]; then
        yt_video "${BASH_REMATCH[1]}"
    elif [[ $1 =~ ^https?://www\.youtube\.com/playlist\?list=([^/]*)$ ]]; then
        yt_playlist "${BASH_REMATCH[1]}"
    elif [[ $1 =~ ^https?://www\.youtube\.com/channel/([^/]*)(/|/videos)?$ ]]; then
        yt_channel "${BASH_REMATCH[1]}"
    elif [[ $1 =~ ^https?://www\.youtube\.com/user/([^/]*)(/|/videos)?$ ]]; then
        yt_user "${BASH_REMATCH[1]}"
    elif [[ $1 =~ ^https?://www\.youtube\.com/c/([^/]*)(/|/videos)?$ ]]; then
        yt_user "${BASH_REMATCH[1]}"
    else
        printf '%s\n' "$1"
    fi
}

handle_ytdl() {
    set -eu -o pipefail
    [[ $1 =~ ^https?://www\.youtube\.com/ ]] || {
        printf '%s\n' "$1"
        return
    }
    youtube-dl --no-warnings --no-playlist -J -- "$1" | jq -r '
        if ._type == "playlist" then
            .entries[] | "#EXTINF:0," + .title + "\nytdl://" + .id
        else
            "#EXTINF:0," + .title + "\nytdl://" + .id
        end
    '
}

export -f _curl yt_video yt_playlist yt_channel yt_user handle_api handle_ytdl
parallel -rk -j 10 handle_api
