#!/usr/bin/env python
# -*- coding: utf-8 -*-

from os import path
from sys import stderr
import argparse
import os
import re


class BacklightDevice:

    def __init__(self, name):
        self.name = name
        with open(path.join(self.name, 'type'), 'r') as f:
            self.type = f.read().strip()
        with open(path.join(self.name, 'max_brightness'), 'r') as f:
            self.max = int(f.read().strip())

    def get(self):
        with open(path.join(self.name, 'brightness'), 'r') as f:
            raw = int(f.read().strip())
            return (raw / self.max) * 100

    def set(self, pct):
        with open(path.join(self.name, 'brightness'), 'w') as f:
            pct = max(0, min(100, pct))
            raw = int(pct * self.max / 100)
            f.write(str(raw))

    @staticmethod
    def compare(dev):
        return {
            'firmware': 0,
            'platform': 1,
            'raw': 2
        }.get(dev.type, 3), -dev.max


parser = argparse.ArgumentParser(
    formatter_class=argparse.RawTextHelpFormatter,
    description='Simple backlight controller.'
)
parser.add_argument('-r', '--reverse', action='store_true',
                    help='when cycle go in reverse')
parser.add_argument('value', nargs='?',
                    help=' int (set)\n'
                         '+int (add)\n'
                         '-int (substract)\n'
                         ' int,int,... (cycle)')
args = parser.parse_args()

values = None
if args.value:
    if re.match(r'^([+-]?\d+|\d+(,\d+)+)$', args.value):
        values = list(map(lambda x: int(x), args.value.split(',')))
    else:
        print('{}: error: {}'.format(
                  parser.prog,
                  'argument value: invalid format'
              ),
              file=stderr)
        parser.print_help(file=stderr)
        exit(2)

os.chdir('/sys/class/backlight')
devs = [BacklightDevice(name) for name in os.listdir()]
devs.sort(key=BacklightDevice.compare)

if devs:
    dev = devs[0]
    if not values:
        print('{:-.0f}'.format(dev.get()))
    elif len(values) == 1:
        value = values[0]
        if re.match(r'^[+-]', args.value):
            dev.set(dev.get() + value)
        else:
            dev.set(value)
    else:
        current = dev.get()
        prevv = values[-1]
        nextv = values[0]
        for value in values:
            if current > value:
                prevv = value
                continue
            if current < value:
                nextv = value
                break
        dev.set(prevv if args.reverse else nextv)
else:
    exit(1)
