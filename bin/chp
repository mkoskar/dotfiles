#!/usr/bin/env bash

set -eu -o pipefail

prgname=${0##*/}

_usage() {
    echo "usage: $prgname [-p profile] [arg...]"
}
usage() { _usage; exit 0; }
usage_err() { _usage; exit 2; } >&2

bin=chromium
bin_name=$bin
profile=

case $prgname in
    ch)
        profile=default
        ;;
    chpg)
        bin=google-chrome-stable
        bin_name=google-chrome
        ;;
esac

while getopts p:h opt; do
    case $opt in
        p) profile=$OPTARG ;;
        h) usage ;;
        *) usage_err ;;
    esac
done
shift $((OPTIND-1))

# ----------------------------------------

if [[ ! $profile ]]; then
    filter='^(?!proxy-socks$)(?!proxy-tor$)(?!skel$).*$'
    profiles=(
        default
        dev
        lab
        plain
    )
    for p in ~/.config/"$bin_name".*; do
        [[ -d $p ]] || continue
        profiles+=("${p#*"$bin_name".}")
    done
    profile=$(
        printf '%s\n' "${profiles[@]}" |
            sort -u | grep -P "$filter" |
            dmenu1 -p "$prgname"
    )
fi

[[ $profile ]] || exit 1

path=~/.config/$bin_name
path_skel=$path.skel
[[ $profile = default ]] || path+=.$profile

if [[ $profile != skel ]]; then
    if [[ ! $profile =~ ^plain && ! -e $path && -e $path_skel ]]; then
        cp -a "$path_skel" "$path"
    fi

    if [[ ! -e $path/theme ]]; then
        mkdir -p "$path"/theme
        cd "$path"/theme

        case $profile in
            default)        frame_color='[200, 200, 200]' ;;
            dev)            frame_color='[0, 153, 255]' ;;
            lab)            frame_color='[255, 34, 0]'  ;;
            plain)          frame_color='[38, 191, 48]' ;;
            proxy-socks)    frame_color='[0, 119, 119]' ;;
            proxy-tor)      frame_color='[100, 100, 100]'  ;;
            *)              frame_color='[255, 153, 0]' ;;
        esac

        cat >manifest.json <<-EOF
		{
		    "manifest_version": 3,
		    "name": "theme",
		    "version": "0.1",
		    "theme": {
		        "colors": {
		            "frame": $frame_color,
		            "frame_incognito": $frame_color,
		            "ntp_text": [0, 0, 0]
		        },
		        "images": {
		            "theme_ntp_background": "ntpbg.png"
		        },
		        "properties": {
		            "ntp_background_alignment": "top left",
		            "ntp_logo_alternate": 0
		        },
		        "tints": {
		            "background_tab" : [-1, -1, 0.8],
		            "frame_inactive" : [-1, -1, 0.7],
		            "frame_incognito_inactive" : [-1, -1, 0.7]
		        }
		    }
		}
		EOF
        pango-view -q --font='sans 8' \
            --background=transparent --foreground=black --margin=5 \
            -t "$profile" -o ntpbg.png
    fi
fi

args=(--user-data-dir="$path")
if [[ -e $path/theme ]]; then
    args+=(--load-extension="$path"/theme)
fi

features+=(

    #-CustomizeChromeSidePanel
    #WebRTCPipeWireCapturer
    #WebUIDarkMode

    #-UseChromeOSDirectVideoDecoder
    #-UseSkiaRenderer
    #CanvasOopRasterization
    #DefaultANGLEVulkan
    #PlatformHEVCDecoderSupport
    #RawDraw
    #UseMultiPlaneFormatForHardwareVideo
    #VaapiIgnoreDriverChecks
    #VaapiVideoDecodeLinuxGL
    #VaapiVideoDecoder
    #VaapiVideoEncoder
    #Vulkan
    #VulkanFromANGLE

    -UseChromeOSDirectVideoDecoder
    -UseSkiaRenderer
    CanvasOopRasterization
    VaapiIgnoreDriverChecks
    VaapiVideoDecodeLinuxGL
    VaapiVideoDecoder
    VaapiVideoEncoder

)

args+=(

    #--disable-remote-fonts
    #--extensions-on-chrome-urls
    #--force-dark-mode
    #--force-device-scale-factor=1
    #--ozone-platform=x11
    #--restore-last-session
    #--show-component-extension-options

    --show-component-extension-options

    #--disable-gpu-driver-bug-workarounds
    #--enable-drdc
    #--enable-gpu-memory-buffer-video-frames
    #--enable-gpu-rasterization
    #--enable-hardware-overlays
    #--enable-native-gpu-memory-buffers
    #--enable-raw-draw
    #--enable-unsafe-webgpu
    #--enable-zero-copy
    #--ignore-gpu-blocklist
    #--use-angle=gl
    #--use-angle=vulkan
    #--use-gl=angle
    #--use-gl=egl
    #--use-vulkan=native

    --enable-gpu-rasterization
    --enable-hardware-overlays
    --enable-zero-copy
    --ignore-gpu-blocklist

)

disable_features=
enable_features=

for f in "${features[@]}"; do
    [[ $f = -* ]] && disable_features+=${f#-}, || enable_features+=$f,
done

args+=(
    ${disable_features:+--disable-features="${disable_features%,}"}
    ${enable_features:+--enable-features="${enable_features%,}"}
)

if [[ ${CH_DEBUG-} ]]; then
    args+=(
        --enable-extension-activity-logging
        --enable-logging=stderr
        --v=1
    )
fi

#export LIBVA_DRI3_DISABLE=1
#export LIBVA_DRIVER_NAME=i965

exec "$bin" "${args[@]}" "$@"
