#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
    lsscr
    ~~~~~

    Traverses and prints out information about X screens.

    :Compatibility: 3.2
    :Copyright: (c) 2019 Miroslav Koškár <http://mkoskar.com/>
    :License: Apache 2.0
"""

from sys import exit, stderr
import argparse
import re
import textwrap

import xcffib
import xcffib.randr
import xcffib.xproto

parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description=textwrap.dedent(
        """
        Traverses and prints out information about X screens.

        Output format:

            * order index
            * 0/1 - preferred
            * 0/1 - pointed
            * 0/1 - focused
            * width
            * height
            * width in millimeters
            * height in millimeters
        """
    )
)
group = parser.add_mutually_exclusive_group()
group.add_argument('--index', type=int, help='select by index')
group.add_argument('--preferred', action='store_true', help='select preferred')
group.add_argument('--pointed', action='store_true', help='select pointed')
group.add_argument('--focused', action='store_true', help='select focused')
parser.add_argument(
    '--nowrap', action='store_false', dest='wrap', help="don't wrap moves"
)
parser.add_argument(
    'move', nargs='*',
    help='"{repeat}{direction}" is repeated move in direction relative to'
    'selected screen (preferred by default); n/N - next, p/P - previous'
)
args = parser.parse_args()


def error(msg):
    print('{}: error: {}'.format(parser.prog, msg), file=stderr)
    exit(1)


def format(screens, ilist):
    for i in ilist:
        scr = screens[i]
        print(
            '{} {} {} {} {} {} {} {}'.format(
                i,
                1 if i == preferred else 0,
                1 if i == pointed else 0,
                1 if i == focused else 0,
                scr.width_in_pixels,
                scr.height_in_pixels,
                scr.width_in_millimeters,
                scr.height_in_millimeters,
            )
        )


conn = xcffib.connect()
randr = conn(xcffib.randr.key)
setup = conn.get_setup()

screens = [scr for i, scr in enumerate(setup.roots)]
if not screens:
    error('no screens')

preferred = conn.pref_screen

pointed = None
for i, scr in enumerate(screens):
    if conn.core.QueryPointer(scr.root).reply().same_screen:
        pointed = i
        break

focused = None
window = conn.core.GetInputFocus().reply().focus
for i, scr in enumerate(screens):
    if scr.root == conn.core.QueryTree(window).reply().root:
        focused = i

selected = None
if args.index is not None:
    try:
        selected = args.index
        screens[selected]
    except IndexError:
        error('index out of range')
elif args.preferred:
    selected = preferred
elif args.pointed:
    selected = pointed
    if selected is None:
        error('no pointed screen')
elif args.focused or args.move:
    selected = focused
    if selected is None:
        error('no focused screen')

if args.move:
    move_pattern = re.compile(r'([+-]?\d+)([nNpP])')
    for move in args.move:
        match = move_pattern.match(move)
        if not match:
            error('invalid move')
        repeat = int(match.group(1))
        dir = match.group(2)
        if dir.lower() == 'n':
            if args.wrap:
                selected = (selected + repeat) % len(screens)
            else:
                selected = min(selected + repeat, len(screens) - 1)
        elif dir.lower() == 'p':
            if args.wrap:
                selected = (selected - repeat) % len(screens)
            else:
                selected = max(0, selected - repeat)
    format(screens, [selected])
else:
    if selected is None:
        format(screens, range(len(screens)))
    else:
        format(screens, [selected])
