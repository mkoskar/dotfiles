#!/usr/bin/env bash

set -eu
exec >&2

prgname=${0##*/}

if (( EUID == 0 )); then
    echo 'This script must NOT be run as root.'
    exit 1
fi

_usage() {
    echo "usage: $prgname {--reset | --terminate | arg...}"
}
usage() { _usage; exit 0; }
usage_err() { _usage; exit 2; } >&2

datadir=~/.local/share/xorg
rundir=$XDG_RUNTIME_DIR/xorg
mkdir -p "$datadir" "$rundir"

# ----------------------------------------

case ${1-} in
    --reset)
        confirm 'Careful! Continue?' n || exit 0
        dispno=$(xserverq dispno)
        spid=$(xserverq pid)
        touch "$rundir/keepserver:$dispno"
        kill -HUP "$spid"
        exit
        ;;
    --terminate)
        confirm 'Careful! Continue?' n || exit 0
        spid=$(xserverq pid)
        kill "$spid"
        exit
        ;;
    -h|--help)
        usage
        ;;
    -*)
        usage_err
        ;;
esac

# ----------------------------------------

declare -i vtno dispno
case $prgname in
    xx)
        for (( dispno=91; 1; dispno++ )); do
            [[ -e /tmp/.X$dispno-lock ]] || break
        done

        (( $# )) || set -- openbox

        sargs=(
            /usr/bin/Xephyr ":$dispno"
            -dpi 96
            -noreset
            -resizeable
            -verbosity 10
        )
        ;;
    *)
        unset DISPLAY
        vtno=$(fgconsole -C /dev/tty 2>/dev/null) || {
            echo 'This script must be run from a console.'
            exit 1
        }
        dispno=$((50+vtno))
        lockfile=/tmp/.X$dispno-lock

        if [[ -e $lockfile ]]; then
            read -r pid <"$lockfile"
            printf '\nDisplay %s is currently in use (pid=%s).\n\n' \
                "$dispno" "$pid"
            if ps -q "$pid"; then
                echo
                exit 1
            else
                echo
                rm -f "$lockfile"
            fi
        fi

        xconfig=${XCONFIG-}
        if [[ ! $xconfig ]]; then
            case $HOSTNAME in
                *) xconfig=default ;;
            esac
        fi

        fqxconfig=xorg.conf.$HOSTNAME
        [[ $xconfig = default ]] || fqxconfig+=.$xconfig
        [[ -r /etc/X11/$fqxconfig ]] || exit 2

        printf '%s\n' "$xconfig" >"$rundir/xconfig:$dispno"

        # shellcheck disable=SC2015
        if (( ! $# )); then
            case $HOSTNAME in
                mirci)
                    case $xconfig in
                        default)
                            (( vtno == 1 )) &&
                                set -- main ||
                                set -- openbox
                            ;;
                        zaphod)
                            (( vtno == 1 )) &&
                                set -- main -- openbox ||
                                set -- openbox -- openbox
                            ;;
                    esac
                    ;;
            esac
        fi

        (( $# )) || set -- openbox

        sargs=(
            /usr/lib/Xorg ":$dispno" "vt$vtno"
            -config "$fqxconfig"
            -keeptty
            -logfile "$datadir/Xorg:$dispno.log"
            -noreset
            -novtswitch
            -quiet
        )
        ;;
esac

# ----------------------------------------

xdisplay_target() { systemctl --user "$1" xdisplay@:"$dispno".target; }

stty=$(stty -g) || true
cookie=$(mcookie)
authfile=$rundir/auth:$dispno
sargs+=(-auth "$rundir/auth:$dispno")

xauth -q add ":$dispno" . "$cookie" &>/dev/null
xauth -q -f "$authfile" add ":$dispno" . "$cookie" &>/dev/null

cleanup() {
    local retstat=$?
    printf '\n> %s: exit %s\n' "$prgname" "$retstat"
    set +e
    xdisplay_target stop
    if [[ $spid ]] && kill -0 "$spid" &>/dev/null; then
        /usr/bin/kill --timeout 15000 KILL "$spid" &>/dev/null
    fi
    # shellcheck disable=SC2046
    kill $(jobs -p) &>/dev/null
    stty "$stty" || stty sane
}
trap cleanup EXIT

exec &>"$datadir/$prgname:$dispno.out"
echo $'\n--------------------------------------------------'
printf '> %s: %s\n\n' "$prgname" "$*"

trap ready=1 USR1; (trap '' USR1; exec "${sargs[@]}") & spid=$!
trap : HUP; (sleep 15; kill -HUP $$) &
wait "$spid" || true
trap '' HUP

aargs=("$@")
while true; do
    [[ ${ready-} ]] || exit 1
    unset ready
    xdisplay_target stop
    xdisplay_target start
    rm -f "$rundir"/keepserver:*
    set -- "${aargs[@]}"
    scrno=0 args=()
    while true; do
        if (( $# )) && [[ $1 != -- ]]; then
            args+=("$1")
        else
            if (( ${#args[@]} )); then
                #DISPLAY=:$dispno.$scrno xsession "${args[@]}" &
                DISPLAY=:$dispno.$scrno srun -X xsession "${args[@]}"
            fi
            (( $# )) || break
            scrno=$((scrno+1))
            args=()
        fi
        shift
    done
    retstat=0
    wait "$spid" || retstat=$?
    (( retstat > 128 )) || break
done
