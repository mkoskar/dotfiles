#!/usr/bin/env bash

set -eu

prgname=${0##*/}

sessions=(
    i3
    i3-local
    main
    openbox
    xfwm4
    xmonad
)

if (( ! $# )); then
    printf '%s\n' "${sessions[@]}"
    exit
fi

_usage() {
    echo "usage: $prgname {--reset | --restart | arg...}"
}
usage() { _usage; exit 0; }
usage_err() { _usage; exit 2; } >&2

sdu() { systemctl --user "$@"; }

datadir=~/.local/share/xorg
rundir=$XDG_RUNTIME_DIR/xorg
mkdir -p "$datadir" "$rundir"

# ----------------------------------------

case $1 in
    --startup)
        kill -USR1 -- "$XSESSIONPID"
        exit
        ;;
    --reset)
        confirm 'Careful! Continue?' n || exit 0
        screen=$(xserverq screen)
        sdu restart xsession@:"$screen".target
        exit
        ;;
    --restart)
        confirm 'Careful! Continue?' n || exit 0
        screen=$(xserverq screen)
        touch "$rundir/keepserver:$screen"
        sdu restart xsession@:"$screen".service
        exit
        ;;
    -h|--help)
        usage
        ;;
    -*)
        usage_err
        ;;
esac

# ----------------------------------------

declare -i x11=0
has-x11 && x11=1

if (( ! x11 )); then
    echo 'This script requires working DISPLAY.' >&2
    exit 1
fi

screen=$(xserverq screen)
exec 8>"$rundir/$prgname:$screen".lock
flock -n 8 || exit 3

exec &>"$datadir/$prgname:$screen".out
echo $'\n--------------------------------------------------'
printf '> [%(%F %T)T] %s: %s\n\n' -1 "$prgname" "$*"

cleanup() {
    local retstat=$?
    set +e
    post_hook
    # shellcheck disable=SC2046
    kill $(jobs -p) &>/dev/null
    printf '\n> %s: exit %s\n' "$prgname" "$retstat"
}
trap cleanup EXIT

session=-
if [[ $1 = - ]]; then
    shift
else
    for i in "${sessions[@]}"; do
        [[ $1 = "$i" ]] && { session=$i; break; }
    done
fi
printf 'session: %s\n' "$session"

export GDK_BACKEND=x11
export XSESSION=$session
export XSESSIONPID=$$

# ----------------------------------------

pre_hook() {
    xscreen -
    sdu start xsession@:"$screen".target

    srun -xl picom
    srun -xl osdd
    srun -xl -n polkit-agent /usr/lib/mate-polkit/polkit-mate-authentication-agent-1
    srun -xl -n sxhkd bash -c 'sleep 1 && exec sxhkd'

    case $session in
        openbox | xfwm4)
            srun -xl tint2
            ;;
    esac
}

post_hook() {
    local dispno spid
    sdu stop xsession@:"$screen".target
    dispno=$(xserverq dispno)
    if [[ ! -e $rundir/keepserver:$screen &&
          ! -e $rundir/keepserver:$dispno ]]; then
        spid=$(xserverq pid)
        sdu --quiet is-active xsession@:"$dispno".[0-9].target || kill "$spid"
    fi
    rm -f "$rundir/keepserver:$screen"
}

exec_hook() {
    case $session in
        i3)
            exec i3 -V
            ;;
        i3-local)
            exec ~/projects/pub/i3/build/i3 -V
            ;;
        main)
            exec xmonad
            ;;
        openbox)
            exec openbox --startup 'xsession --startup'
            ;;
        xfwm4)
            exec xfwm4 --compositor=off
            ;;
        *)
            exec "$@"
            ;;
    esac
}

startup_hook() {
    case $session in
        main)
            srun -xl thunderbird
            srun -xl workrave
            ;;
    esac
}

# ----------------------------------------

set +e

pre_hook
trap startup_hook USR1
exec_hook "$@" & pid=$!

while true; do
    wait "$pid"
    (( $? > 128 )) || break
done
