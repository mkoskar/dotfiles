# tmux >= 3.0

# Server Options
# ----------------------------------------

set default-terminal tmux-256color
set escape-time 0
set exit-empty off
set focus-events on
set history-file ~/.local/share/tmux_history

%if #{>=:#{version},3.2}
    set copy-command 'xclip -i'
    set extended-keys on
    set -a terminal-features 'rxvt-unicode*:clipboard:ccolour:cstyle:focus:title'
    set -a terminal-overrides 'rxvt-unicode*:Cr=\E]12;#dddddd\007'
%else
    set -a terminal-overrides 'rxvt-unicode*\
:XT\
:Ms=\E]52;%p1%s;%p2%s\007\
:Cs=\E]12;%p1%s\007\
:Cr=\E]12;#dddddd\007\
:Ss=\E[%p1%d q\
:Se=\E[2 q'
%endif


# Session Options
# ----------------------------------------

set -g base-index 1
set -g default-command shell
set -g display-panes-time 5000
set -g display-time 2000
set -g history-limit 8192
set -g lock-command vlock
set -g message-command-style fg=green,bold
set -g message-style fg=white,bold
set -g prefix C-a
set -g renumber-windows on
set -g set-titles on
set -g set-titles-string \#T
set -g status-interval 5
set -g status-keys vi

set -g status-left ''
%if #{!=:#{b:socket_path},default}
    set -ga status-left '(#{b:socket_path}) '
%endif
set -ga status-left '#[fg=green,bold]#{=20:session_name}#[default] '
set -ga status-left '#{?client_readonly,[RO] ,}'
set -ga status-left '[#{?pane_synchronized,B, }#{?pane_pipe,P, }#{?client_prefix,^, }] '
set -g status-left-length 40

set -g status-right '#{?#{E:@panes_mode},#{E:@panes_mode} ,}'
set -ga status-right '#{?#{==:#{pane_mode},copy-mode},#{?pane_search_string,/#{pane_search_string}/ ,},}'
set -ga status-right '#{?selection_active,#{?rectangle_toggle,block,visual}-,}'
set -ga status-right '#{?pane_in_mode,#{pane_mode}#{?#{E:@mode},/#{E:@mode},} ,}'
set -ga status-right '#{?#{&&:#{!=:#{client_key_table},root},#{!=:#{client_key_table},prefix}},#[bg=red#,fg=colour231]#{client_key_table}#[default] ,}'
set -ga status-right "$HOSTNAME"
set -g status-right-length 100

set -g status-style default
set -ga update-environment WAYLAND_DISPLAY
set -g word-separators ' -_@.=/&;'

set-hook -g after-display-panes { set -up @panes_mode }
set-hook -g client-attached select-layout
set-hook -g client-resized select-layout
set-hook -g pane-mode-changed { if -F '#{pane_in_mode}' '' { set -up @mode } }


# Window & Pane Options
# ----------------------------------------

set -g automatic-rename-format '#{pane_current_command}'
set -g main-pane-width 84
set -g mode-keys vi
set -g mode-style bg=red,fg=colour231
set -g pane-active-border-style fg=yellow
set -g pane-border-style fg=colour239
set -g window-status-bell-style fg=yellow,bold
set -g window-status-current-format '#[fg=colour231,bold]#{?#{==:#{pane_mode},copy-mode},#[bg=red],}#I:#W#F'

%if #{>=:#{version},3.2}
    set -g copy-mode-current-match-style bg=red,fg=colour231
    set -g copy-mode-mark-style bg=cyan,fg=black
    set -g copy-mode-match-style bg=red,fg=colour231
%endif


# Key Bindings
# ----------------------------------------

# Prefix
unbind C-b
bind C-a send-prefix
bind C-q send ^Q
bind -n C-q send-prefix

# Creating windows
bind C new-window
bind c new-window -c '#{pane_current_path}'
bind C-n new-window -c '#{pane_current_path}' -a

# Selecting windows
bind a last-window
bind 0 select-window -t :^
bind ^ select-window -t :^
bind $ select-window -t :$
bind ( select-window -t :^
bind ) select-window -t :$
bind -r M-h previous-window
bind -r M-l next-window

# Moving windows
bind -r M-H swap-window -d -t :-1
bind -r M-L swap-window -d -t :+1
bind W {
    set -p @mode swap-window
    choose-tree -Zw 'swap-window -t "%%"'
}

# Splitting windows
unbind %
unbind \"
bind | split-window -h
bind _ split-window -v
bind \\ split-window -c '#{pane_current_path}' -h
bind - split-window -c '#{pane_current_path}' -v
bind s switch-client -T split
bind -T split j split-window -c '#{pane_current_path}' -v
bind -T split k split-window -c '#{pane_current_path}' -vb
bind -T split h split-window -c '#{pane_current_path}' -hb
bind -T split l split-window -c '#{pane_current_path}' -h
bind -T split J split-window -c '#{pane_current_path}' -fv
bind -T split K split-window -c '#{pane_current_path}' -fvb
bind -T split H split-window -c '#{pane_current_path}' -fhb
bind -T split L split-window -c '#{pane_current_path}' -fh

# Selecting panes
bind q display-panes -d 0
%if #{>=:#{version},3.1}
    bind j select-pane -DZ
    bind k select-pane -UZ
    bind h select-pane -LZ
    bind l select-pane -RZ
    bind i select-pane -Z -t :.+
    bind o select-pane -Z -t :.-
%else
    bind j select-pane -D
    bind k select-pane -U
    bind h select-pane -L
    bind l select-pane -R
    bind i select-pane -t :.+
    bind o select-pane -t :.-
%endif

# Moving panes
bind J swap-pane -s ':.{down-of}'
bind K swap-pane -s ':.{up-of}'
bind H swap-pane -s ':.{left-of}'
bind L swap-pane -s ':.{right-of}'
bind I swap-pane -D
bind O swap-pane -U
bind \{ swap-pane -Ud
bind \} swap-pane -Dd
%if #{>=:#{version},3.1}
    bind C-i rotate-window -UZ
    bind C-o rotate-window -DZ
%else
    bind C-i rotate-window -U
    bind C-o rotate-window -D
%endif
bind M-O {
    set -p @panes_mode swap-pane
    display-panes -d 0 'swap-pane -s "%%"'
}

# Resizing panes
bind r switch-client -T resize
bind -T resize j resize-pane -D 5 \; switch-client -T resize
bind -T resize k resize-pane -U 5 \; switch-client -T resize
bind -T resize h resize-pane -L 5 \; switch-client -T resize
bind -T resize l resize-pane -R 5 \; switch-client -T resize
bind -T resize J resize-pane -D \; switch-client -T resize
bind -T resize K resize-pane -U \; switch-client -T resize
bind -T resize H resize-pane -L \; switch-client -T resize
bind -T resize L resize-pane -R \; switch-client -T resize

# Copy mode
bind / copy-mode \; send /
bind ? copy-mode \; send ?
unbind -T copy-mode-vi D
unbind -T copy-mode-vi C-j
bind -T copy-mode-vi - send -X back-to-indentation
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi Escape send -X cancel
bind -T copy-mode-vi Space send -X clear-selection
bind -T copy-mode-vi Enter send -X cursor-down
bind -T copy-mode-vi M-j send -N 5 -X cursor-down
bind -T copy-mode-vi M-k send -N 5 -X cursor-up
bind -T copy-mode-vi M-h send -N 5 -X cursor-left
bind -T copy-mode-vi M-l send -N 5 -X cursor-right
bind -T copy-mode-vi C-e send -N 5 -X scroll-down
bind -T copy-mode-vi C-y send -N 5 -X scroll-up
bind -T copy-mode-vi / command-prompt -i -p '> /' 'send -X search-forward-incremental "%%%"'
bind -T copy-mode-vi ? command-prompt -i -p '> ?' 'send -X search-backward-incremental "%%%"'
bind -T copy-mode-vi Y send -X select-line \; send -X copy-pipe-and-cancel
bind -T copy-mode-vi y \
    if -F '#{selection_active}' \
        { send -X copy-pipe-and-cancel } \
        { switch-client -T y-pending }
bind -T y-pending y send -X select-line \; send -X copy-pipe-and-cancel
bind -T y-pending w send -X select-word \; send -X copy-pipe-and-cancel

# Layouts
bind = select-layout -E
bind Space select-layout
bind < set main-pane-width 84 \; select-layout main-vertical
bind > set main-pane-width 116 \; select-layout main-vertical

# Close pane / window / session / server
bind x switch-client -T kill
bind -T kill x confirm -p '> kill-pane? (y/n)' kill-pane
bind -T kill w confirm -p '> kill-window? (y/n)' kill-window
bind -T kill s confirm -p '> kill-session? (y/n)' kill-session
bind C-x confirm -p '> kill-server? (y/n)' kill-server

# Send keys
bind g send Home
bind G send End
bind M-j send -N 5 Down
bind M-k send -N 5 Up

# Save content
bind P pipe-pane -o 'cat >~/tmp/tmux-pipe.#{q:pid}.#{q:pane_id}.$(date +%s)'
bind S switch-client -T save
bind -T save S {
    run 'tmux-pipe #{q:pane_height} #{q:scroll_position} >~/tmp/tmux-screen.#{q:pid}.#{q:pane_id}.$(date +%s)'
    display '> saved screen'
}
bind -T save A {
    run 'tmux-pipe >~/tmp/tmux-all.#{q:pid}.#{q:pane_id}.$(date +%s)'
    display '> saved all'
}

# URLs
bind u run -b 'tmux-pipe #{q:pane_height} #{q:scroll_position} | urls -o -r'
bind y run -b 'tmux-pipe #{q:pane_height} #{q:scroll_position} | urls -y -r'
bind U run -b 'tmux-pipe | urls -o -r'
bind Y run -b 'tmux-pipe | urls -y -r'

# Other
unbind C-z
bind C-g display
bind C-l clear-history \; display '> history cleared'
bind Enter respawn-pane
%if #{>=:#{version},3.2}
    bind ` customize-mode
%endif
bind \' choose-buffer -Z
bind \" switch-client -l
bind , switch-client -p
bind . switch-client -n
bind B set synchronize-panes
bind M set mouse \; display '> mouse #{?mouse,on,off}'
bind R source ~/.tmux.conf \; display '> tmux.conf reloaded'
bind M-o choose-tree -GZ
bind M-i run 'pstree -aglnpsSuU #{q:pane_pid}'
bind C-c {
    set -p @mode xclip
    choose-buffer -Z { run -b 'tmux show-buffer -b "%%" | xclip -i' }
    if -F '#{pane_in_mode}' '' { set -up @mode }
}
